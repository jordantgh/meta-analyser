---
title: "Untitled"
format: html
---

# Chat GPT log

### User

|    | Unnamed: 0   | Unnamed: 1                                       | Day 4 (Early)     | Unnamed: 3   | Unnamed: 4   | Day 12 (Intermediate)   | Unnamed: 6   | Unnamed: 7   | Day 18 (Late)     | Unnamed: 9   | Unnamed: 10   |
|---:|:-------------|:-------------------------------------------------|:------------------|:-------------|:-------------|:------------------------|:-------------|:-------------|:------------------|:-------------|:--------------|
|  0 | Gene         | Description                                      | Etop.Score        | FDR          | Etoposide    | Etop.Score              | FDR          | Etoposide    | Etop.Score        | FDR          | Etoposide     |
|  1 | ABCC1        | ATP binding cassette subfamily C member 1        | -12.0873475832922 | 0.001238     | Resistance   | -12.237081477992        | 0.00099      | Resistance   | -7.08701315330034 | 0.001238     | Resistance    |
|  2 | NHEJ1        | non-homologous end joining factor 1              | -11.6082535558549 | 0.001238     | Resistance   | -7.67964596718233       | 0.00099      | Resistance   | nan               | nan          | nan           |
|  3 | RAD54L2      | DNA repair and recombination protein RAD54-like2 | -6.97947298772544 | 0.001238     | Resistance   | -9.39989874430861       | 0.00099      | Resistance   | -6.83445892327763 | 0.001238     | Resistance    |
|  4 | ZNF451       | zinc finger protein 451                          | -10.0497422718239 | 0.001238     | Resistance   | -4.77598518862714       | 0.05243      | Resistance   | -7.57935125458344 | 0.001238     | Resistance    |

I would like to have the data frame in nguyenGenomewideCRISPRCas92022_36111891_BLOODA_ADV-2022-007934-mmc1_Supplemental Table S1_t1.csv in tidy format. It was originally an excel sheet where it was a crosstab, so some of the formatting is missing. For example, the "early", "intermediate" and "late" cells were merged originally above the  "| Etop.Score        | FDR          | Etoposide    | " columns. In reality, the timepoint is an experimental perturbation and different timepoints are different observations, so timepoint should be considered as its own column in tidy format. Remember this only applies to experimental perturbations; metrics can stay as their own columns. You can use pandas melt.

### ChatGPT

It indeed appears that the first row contains redundant information, as mentioned in your guidance. We can now proceed with the transformation to "tidy" (or "long") format by the following means. Let's start by dropping the first row and melting the DataFrame for the three time points: "Day 4 (Early)", "Day 12 (Intermediate)", and "Day 18 (Late)".

```{python}
# Dropping the first row (which contains redundant information)
df = df.drop(0).reset_index(drop=True)

# Melting DataFrame for the three time points
time_points = ["Day 4 (Early)", "Day 12 (Intermediate)", "Day 18 (Late)"]
tidy_df = pd.DataFrame()
for i, time_point in enumerate(time_points):
    sub_df = df[["Unnamed: 0", "Unnamed: 1", time_point, f"Unnamed: {3 + i*3}", f"Unnamed: {4 + i*3}"]].copy()
    sub_df.columns = ["Gene", "Description", "Etop.Score", "FDR", "Etoposide"]
    sub_df["Timepoint"] = time_point
    tidy_df = pd.concat([tidy_df, sub_df])

# Reordering columns
tidy_df = tidy_df[["Gene", "Description", "Timepoint", "Etop.Score", "FDR", "Etoposide"]]

# Resetting index
tidy_df.reset_index(drop=True, inplace=True)

# Sorting by the "Gene" column
tidy_df = tidy_df.sort_values(by="Gene").reset_index(drop=True)

# Previewing the tidy DataFrame
tidy_df.head()
```

## User

Now I want you to consider ramakerPooledCRISPRScreening2021_34049503_12885_2021_8388_MOESM1_ESM_TableS3B_t1.csv

|    | Supplemental Table S3B. Knockout (Gecko) Screen results. L2FC Sum for individual drug-cell line combinations    | Unnamed: 1         | Unnamed: 2         | Unnamed: 3        | Unnamed: 4              | Unnamed: 5         | Unnamed: 6         | Unnamed: 7              | Unnamed: 8         | Unnamed: 9         | Unnamed: 10            | Unnamed: 11        | Unnamed: 12       | Unnamed: 13       | Unnamed: 14        | Unnamed: 15       | Unnamed: 16             | Unnamed: 17       | Unnamed: 18        | Unnamed: 19             | Unnamed: 20       | Unnamed: 21        | Unnamed: 22            | Unnamed: 23       | Unnamed: 24       | Unnamed: 25       | Unnamed: 26        | Unnamed: 27       |
|---:|:----------------------------------------------------------------------------------------------------------------|:-------------------|:-------------------|:------------------|:------------------------|:-------------------|:-------------------|:------------------------|:-------------------|:-------------------|:-----------------------|:-------------------|:------------------|:------------------|:-------------------|:------------------|:------------------------|:------------------|:-------------------|:------------------------|:------------------|:-------------------|:-----------------------|:------------------|:------------------|:------------------|:-------------------|:------------------|
|  0 | P1 = Panc1: B3=BxPC3                                                                                            | nan                | nan                | nan               | nan                     | nan                | nan                | nan                     | nan                | nan                | nan                    | nan                | nan               | nan               | nan                | nan               | nan                     | nan               | nan                | nan                     | nan               | nan                | nan                    | nan               | nan               | nan               | nan                | nan               |
|  1 | For each gene in each screen we calculated a L2FC sum, a p-value and FDR                                        | nan                | nan                | nan               | nan                     | nan                | nan                | nan                     | nan                | nan                | nan                    | nan                | nan               | nan               | nan                | nan               | nan                     | nan               | nan                | nan                     | nan               | nan                | nan                    | nan               | nan               | nan               | nan                | nan               |
|  2 | nan                                                                                                             | Combined_L2FC_Sum  | Combined_P         | Combined_FDR      | P1_Gemcitabine_L2FC_Sum | P1_Gemcitabine_P   | P1_Gemcitabine_FDR | P1_Oxaliplatin_L2FC_Sum | P1_Oxaliplatin_P   | P1_Oxaliplatin_FDR | P1_Irinotecan_L2FC_Sum | P1_Irinotecan_P    | P1_Irinotecan_FDR | P1_5FU_L2FC_Sum   | P1_5FU_P           | P1_5FU_FDR        | B3_Gemcitabine_L2FC_Sum | B3_Gemcitabine_P  | B3_Gemcitabine_FDR | B3_Oxaliplatin_L2FC_Sum | B3_Oxaliplatin_P  | B3_Oxaliplatin_FDR | B3_Irinotecan_L2FC_Sum | B3_Irinotecan_P   | B3_Irinotecan_FDR | B3_5FU_L2FC_Sum   | B3_5FU_P           | B3_5FU_FDR        |
|  3 | A1BG                                                                                                            | -0.904586216999054 | 0.314775208036283  | 0.701825580880729 | -0.904586216999054      | 0.705751098984387  | 0.999965452086164  | -0.392715133913581      | 0.72360982484397   | 0.970318452715167  | -1.4862571781002       | 0.28926700246282   | 0.999898342971155 | -2.04481219892761 | 0.618499289440127  | 0.99991789536423  | -0.378696386660878      | 0.747680849435469 | 0.993359561111788  | -0.00544005991251131    | 0.394241943897826 | 0.962196700272364  | -0.607283237222274     | 0.781932864584173 | 0.999628192829801 | -1.11520453166738 | 0.950561172993587  | 0.999687840103799 |
|  4 | A1CF                                                                                                            | 0.351737973373145  | 0.0193697286062979 | 0.650760987670613 | 0.351737973373145       | 0.0927310393613259 | 0.922223015712754  | 0.517615043804666       | 0.0444151399234951 | 0.618721214655904  | -0.107825095499609     | 0.0502095521796057 | 0.807361064319172 | 0.37677409411936  | 0.0518009297082954 | 0.689169112092335 | -0.684541032563738      | 0.903139463221877 | 0.997791930332779  | -0.362510690205391      | 0.673465770503558 | 0.981022096637038  | -0.378322136192466     | 0.641481478495057 | 0.999628192829801 | 0.510627260795835 | 0.0663233750561576 | 0.885783329272473 |

## ChatGPT

In this case, the main issue is that the first three rows are not part of the table proper, and appear to be just metadata. Those should be trimmed. Additionally, we can see that this is currently a "wide" format table with different experimental conditions that should be converted into their own columns to make this into "long" form tidy data. In this case, by studying the table we can see that there are two variables at play - cell line and treatment type, so those should be put into a column each (the "combined" column can be treated as "Combined_Combined" i.e., combined cell type and combined drug type).

```{python}
# Removing the first three rows which are metadata
df = df.iloc[3:].reset_index(drop=True)

# Renaming the columns using the row with column names
df.columns = df.loc[0]

# Dropping the row with column names
df = df.drop(0).reset_index(drop=True)
```

Now that we've successfully removed the metadata from the DataFrame, let's proceed to create new columns for 'Cell Line' and 'Treatment'. To achieve this, we'll split the 'combined' column into 'Cell Line' and 'Treatment' where applicable. The combined cell type and combined drug type will be kept as 'Combined_Combined'.

First, we'll identify the 'combined' columns that need to be split. These columns will be identified by the presence of the term '_L2FC_Sum' in their name, as these columns contain information about both the cell line and treatment. Then, we'll split these column names into separate 'Cell Line' and 'Treatment' columns.

```{python}
# Identifying 'combined' columns that need to be split
combined_columns = [col for col in df.columns if '_L2FC_Sum' in col]

# Creating new DataFrames to hold the tidy data
tidy_dfs = []

# Looping over the 'combined' columns
for col in combined_columns:
    # Splitting the column name into cell line and treatment
    split_col = col.split('_L2FC_Sum')[0]
    
    # If cell line and treatment are both 'Combined', they will be kept as 'Combined_Combined'
    if split_col == 'Combined':
        cell_line, treatment = 'Combined_Combined', 'Combined_Combined'
    else:
        cell_line, treatment = split_col.split('_')
    
    # Creating a new DataFrame with the 'Cell Line' and 'Treatment' columns
    new_df = df[['Unnamed: 0', col, col.replace('_L2FC_Sum', '_P'), col.replace('_L2FC_Sum', '_FDR')]].copy()
    new_df.columns = ['Gene', 'L2FC_Sum', 'P', 'FDR']
    new_df['Cell Line'] = cell_line
    new_df['Treatment'] = treatment
    
    # Appending the new DataFrame to the list of tidy DataFrames
    tidy_dfs.append(new_df)

# Concatenating all the tidy DataFrames
tidy_df = pd.concat(tidy_dfs)

# Resetting index
tidy_df.reset_index(drop=True, inplace=True)

# Checking the tidy DataFrame
tidy_df.head()
```

## User

Let's move on.

Now consider zelceskiMND1PSMC3IPControl2023_37163373_1-s2.0-S2211124723004953-mmc2_ST1A_t1.csv

|    | GeneID   |   CRISPRn Viability Z score (olap and talaz screen) |   CRISPRn Drug Effect Z score (olap screen) |   CRISPRn Olaparib sgRNA Drug Effect Zcount |   CRISPRn Olaparib Gene Rank |   CRISPRn Drug Effect Z score (talaz screen) |   CRISPRn Talazoparib sgRNA Drug Effect Zcount |   CRISPRn Talazoparib Gene Rank |   CRISPRi Viability Z score (olap screen) |   CRISPRi Drug Effect Z score (olap screen) |   CRISPRi Olaparib sgRNA Drug Effect Zcount |   CRISPRi Olaparib Gene Rank |   CRISPRi Viability Z score (talaz screen) |   CRISPRi Drug Effect Z score (talaz screen) |   CRISPRi Talazoparib sgRNA Drug Effect Zcount |   CRISPRi Talazoparib Gene Rank |
|---:|:---------|----------------------------------------------------:|--------------------------------------------:|--------------------------------------------:|-----------------------------:|---------------------------------------------:|-----------------------------------------------:|--------------------------------:|------------------------------------------:|--------------------------------------------:|--------------------------------------------:|-----------------------------:|-------------------------------------------:|---------------------------------------------:|-----------------------------------------------:|--------------------------------:|
|  0 | EME1     |                                           -1.18067  |                                    -5.79777 |                                           2 |                    145.028   |                                     -6.88297 |                                              4 |                         92.1895 |                                 -1.04162  |                                    -5.67188 |                                           4 |                     69.243   |                                  -1.55784  |                                     -28.459  |                                              0 |                         1.25992 |
|  1 | PSMC3IP  |                                           -0.978569 |                                   -11.6888  |                                           4 |                      7.86222 |                                    -13.1932  |                                              4 |                          4.4814 |                                 -5.7805   |                                    -9.8747  |                                           5 |                      7.73061 |                                  -7.7763   |                                     -28.3144 |                                              3 |                         1.81712 |
|  2 | MUS81    |                                           -1.56819  |                                    -8.39835 |                                           3 |                     27.4471  |                                     -9.1705  |                                              3 |                         20.8562 |                                 -4.31827  |                                    -9.81233 |                                           5 |                     12.2539  |                                  -5.06826  |                                     -24.466  |                                              1 |                         3.30193 |
|  3 | XRCC1    |                                           -0.475995 |                                    -6.8399  |                                           4 |                     57.1174  |                                    -10.7341  |                                              5 |                          6.8399 |                                  0.124871 |                                    -3.95381 |                                           1 |                    270.776   |                                  -0.166749 |                                     -22.5125 |                                              0 |                         6       |
|  4 | LIG1     |                                           -1.67118  |                                   -13.2487  |                                           5 |                      7.48887 |                                    -11.0494  |                                              5 |                          9.3561 |                                 -1.6233   |                                   -12.5744  |                                           4 |                      3.30193 |                                  -1.19348  |                                     -18.7401 |                                              0 |                         6.8399  |

## ChatGPT

In this case, the header column is on the first row so we dont need to remove any rows. However, like before, in the first row we can see that there actually multiple experimental condition variables. Specifically, the drug variable (talazoparib/"talaz" or olaparib/"olap") and the screen type variable (CRISPRn or CRISPRi) are present in each relevant column name.

We'll proceed by:
1. Identifying the columns that contain these experimental condition variables.
2. Splitting these columns into separate 'Drug' and 'Screen Type' columns.
3. Creating a tidy DataFrame that includes these new columns.

Let's begin by identifying the relevant columns and proceed from there.

```{python}
# Identifying columns that contain experimental condition variables (Drug and Screen Type)
relevant_columns = [col for col in df_zelceski.columns if 'CRISPR' in col]

# Creating new DataFrames to hold the tidy data
tidy_dfs_zelceski = []

# Looping over the relevant columns
for col in relevant_columns:
    # Extracting Screen Type (CRISPRn or CRISPRi)
    screen_type = 'CRISPRn' if 'CRISPRn' in col else 'CRISPRi'
    
    # Extracting Drug (olaparib/"olap" or talazoparib/"talaz")
    drug = 'olap' if 'olap' in col else 'talaz' if 'talaz' in col else 'combined'
    
    # Creating a new DataFrame with the 'Screen Type' and 'Drug' columns
    new_df = df_zelceski[['GeneID', col]].copy()
    new_df.columns = ['Gene', 'Value']
    new_df['Screen Type'] = screen_type
    new_df['Drug'] = drug
    new_df['Metric'] = col.replace(f'CRISPRn {drug} ', '').replace(f'CRISPRi {drug} ', '').replace(' (olap screen)', '').replace(' (talaz screen)', '').replace(' (olap and talaz screen)', '')
    
    # Appending the new DataFrame to the list of tidy DataFrames
    tidy_dfs_zelceski.append(new_df)

# Concatenating all the tidy DataFrames
tidy_df_zelceski = pd.concat(tidy_dfs_zelceski)

# Resetting index
tidy_df_zelceski.reset_index(drop=True, inplace=True)

# Reordering columns
tidy_df_zelceski = tidy_df_zelceski[['Gene', 'Screen Type', 'Drug', 'Metric', 'Value']]

# Checking the tidy DataFrame
tidy_df_zelceski.head()
```

## User

Now consider huangGenomeWideCRISPR2019_31508283_ADVS-6-1900782-s005_A-1_t1.csv.

|    | The original data for Figure 1b: The differential sgRNAs between day 7 and day 0 (U87 EGFRvIII cells treated with DMSO or temozolomide)   | Unnamed: 1   | Unnamed: 2         | Unnamed: 3        | Unnamed: 4          | Unnamed: 5       | Unnamed: 6     |
|---:|:------------------------------------------------------------------------------------------------------------------------------------------|:-------------|:-------------------|:------------------|:--------------------|:-----------------|:---------------|
|  0 | ID                                                                                                                                        | Entry        | DMSO Log FC        | DMSO significance | TMZ Log FC          | TMZ significance | Druggable like |
|  1 | 18                                                                                                                                        | ABAT         | 2.00504027121423   | +                 | -0.0871767548098087 | nan              | +              |
|  2 | 22                                                                                                                                        | ABCB7        | 0.0171081881458409 | nan               | -2.18168765294996   | +                | nan            |
|  3 | 29                                                                                                                                        | ABR          | -4.59110604911746  | +                 | -2.17863971209772   | +                | nan            |
|  4 | 93                                                                                                                                        | ACVR2B       | 0.569002829562414  | nan               | -1.72977174588209   | +                | +              |

## ChatGPT

It appears that the first row of the DataFrame contains metadata and should be removed. The actual header row (containing the column names) is in the second row of the DataFrame.

We can see that the columns "DMSO Log FC", "DMSO significance", "TMZ Log FC", and "TMZ significance" contain information related to the experimental perturbations DMSO or TMZ. We'll need to reshape the DataFrame accordingly to have these as their own variable/column.

Let's start by removing the first row, setting the correct headers, and then proceeding with the reshaping.

```{python}
# Removing the first row (metadata) and setting the correct headers
df_huang.columns = df_huang.loc[0]
df_huang = df_huang.drop(0).reset_index(drop=True)

# Creating new DataFrames to hold the tidy data
tidy_dfs_huang = []

# Looping over the experimental perturbations (DMSO and TMZ)
perturbations = ['DMSO', 'TMZ']
for perturbation in perturbations:
    # Creating a new DataFrame with the 'Perturbation' column
    new_df = df_huang[['ID', 'Entry', f'{perturbation} Log FC', f'{perturbation} significance', 'Druggable like']].copy()
    new_df.columns = ['ID', 'Entry', 'Log FC', 'Significance', 'Druggable like']
    new_df['Perturbation'] = perturbation
    
    # Appending the new DataFrame to the list of tidy DataFrames
    tidy_dfs_huang.append(new_df)

# Concatenating all the tidy DataFrames
tidy_df_huang = pd.concat(tidy_dfs_huang)

# Resetting index
tidy_df_huang.reset_index(drop=True, inplace=True)

# Checking the tidy DataFrame
tidy_df_huang.head()
```

## User

Now consider "galloCCNE1AmplificationSynthetic2022_35444283_41586_2022_4638_MOESM3_ESM_ReadCounts TKOv2 CCNE1 SL_t1.csv".

|    | Read Counts for screens using TKOv2   | Unnamed: 1   | Unnamed: 2                                     | Unnamed: 3                                           | Unnamed: 4                                           | Unnamed: 5                                           | Unnamed: 6                                           | Unnamed: 7                                      | Unnamed: 8                                            | Unnamed: 9                                            | Unnamed: 10                                           | Unnamed: 11                                           | Unnamed: 12                    | Unnamed: 13                             | Unnamed: 14                          |
|---:|:--------------------------------------|:-------------|:-----------------------------------------------|:-----------------------------------------------------|:-----------------------------------------------------|:-----------------------------------------------------|:-----------------------------------------------------|:------------------------------------------------|:------------------------------------------------------|:------------------------------------------------------|:------------------------------------------------------|:------------------------------------------------------|:-------------------------------|:----------------------------------------|:-------------------------------------|
|  0 | sgRNA                                 | Gene         | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#2_T0 | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#2_T15_repA | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#2_T15_repB | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#2_T18_repA | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#2_T18_repB | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#21_T0 | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#21_T15_repA | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#21_T15_repB | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#21_T18_repA | TKOv2_RPE1.hTERT.Cas9.dTP53_CCNE1oe_Clone#21_T18_repB | TKOv2_RPE1.hTERT.Cas9.dTP53_T0 | TKOv2_RPE1.hTERT.Cas9.dTP53_WT_T18_repA | TKOv2_RPE1.hTERT.Cas9.dTP53_T18_repB |
|  1 | chr1:100111914-100111933_PALMD_-      | PALMD        | 516                                            | 242                                                  | 166                                                  | 325                                                  | 283                                                  | 1106                                            | 220                                                   | 521                                                   | 305                                                   | 117                                                   | 1340                           | 690                                     | 676                                  |
|  2 | chr1:100133222-100133241_PALMD_+      | PALMD        | 101                                            | 35                                                   | 31                                                   | 52                                                   | 37                                                   | 129                                             | 72                                                    | 99                                                    | 50                                                    | 35                                                    | 167                            | 117                                     | 62                                   |
|  3 | chr1:100152265-100152284_PALMD_+      | PALMD        | 808                                            | 290                                                  | 134                                                  | 370                                                  | 255                                                  | 703                                             | 194                                                   | 902                                                   | 218                                                   | 179                                                   | 1316                           | 705                                     | 586                                  |
|  4 | chr1:100154717-100154736_PALMD_+      | PALMD        | 425                                            | 239                                                  | 133                                                  | 170                                                  | 201                                                  | 476                                             | 122                                                   | 453                                                   | 145                                                   | 153                                                   | 439                            | 421                                     | 277                                  |

## ChatGPT

In this case, the first row appears to be largely irrelevant, with just a single metadata cell. This case appears a bit unusual because it consists only of a single metric (raw counts), which we can infer from the metadata column, while each column (other than the sgRNA column) is a unique perturbation. 

We'll proceed to transform this DataFrame into a tidy format by gathering all the condition columns into a single column and their corresponding values into a 'Value' column. This can be achieved using the pandas `melt` function, where the variable column will represent the unique condition, and the value column will represent the raw counts.

```{python}
# Removing the first row (metadata) and setting the correct headers
df_gallo_original.columns = df_gallo_original.loc[0]
df_gallo_original = df_gallo_original.drop(0).reset_index(drop=True)

# Renaming the "sgRNA" column
df_gallo_original.rename(columns={'sgRNA': 'sgRNA_with_strand'}, inplace=True)

# Melting the DataFrame to gather all the condition columns into a single 'Condition' column and their corresponding values into a 'Value' column
tidy_df_gallo_with_strand = df_gallo_original.melt(id_vars=['sgRNA_with_strand', 'Gene'], var_name='Condition', value_name='Value')

# Checking the tidy DataFrame with strand information
tidy_df_gallo_with_strand.head()
```